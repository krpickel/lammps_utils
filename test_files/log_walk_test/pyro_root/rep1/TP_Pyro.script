# This script ramps the temp from 300 K to 5000K and writes datafiles every
# 10 K for carbonization testing at different temperatures. This allows for 
# one heating simulation, while getting incremental temperature datafiles.
#-----------Initialization-----------

units           real
dimension       3
boundary        p p p
atom_style      charge


#-----------InputParameters-----------

# System info
variable        replicate string 1
variable        system string TP
variable        FF string ReaxFF

# Heating and writing intervals settings
variable        hrate equal 10     # Heating rate (K/ps)
variable        stemp equal 300    # Starting Temperature (K)
variable        etemp equal 5000   # Ending Temperature (K)
variable        wtemp equal 10     # Temperature (K) intervals to write datafiles

# bond order and delete settings
variable        Nevery   equal   1      # Sample bond-order every this many timesteps
variable        Nrepeat  equal   100    # Number of bond-order samples used for calculating averages (0.1 dt ; 100 = 0.01 ps)
variable        Nfreq    equal   1000   # Calculate average bond-order every this many steps (1000 steps at 0.1 fs ts - 0.1 ps was optimized from furan work)
variable        MassMin  equal   0      # Minimum molecular weight of species to delete (amu)
variable        MassMax  equal   50     # Maximum molecular weight of species to delete (amu)

# SimulationID
variable        myid string heating_${system}_${FF}_rep_${replicate}_del_${MassMin}-${MassMax}


#-----------ForceField-----------

read_data       TP_4k_H2O_reax_r1_rlxed.data
pair_style      reaxff NULL safezone 5.0 mincap 100
pair_coeff      * * ffield_CHON_for_PAN_PBO.reax C H O

# Requirement for fix reaxff/species (LAMMPS will reset if needed)
variable        Nneigh   equal   v_Nrepeat*v_Nevery
neigh_modify    delay 0 every ${Nneigh} check no

fix             charges all qeq/reaxff 1 0.0 10.0 1.0e-6 reaxff
timestep        0.1


#-----------ComputeCharYield-----------

variable        tmp equal vol
variable        tmp_vol equal ${tmp}
variable        tmp equal density
variable        tmp_dens equal ${tmp}

variable        mass_initial equal ${tmp_vol}*${tmp_dens}
variable        mass_stepped equal vol*density
variable        char_yield equal 100*(v_mass_stepped/v_mass_initial)


#-----------LoggingInfo-----------

# Will be deleting so we need to compute dynamic temp and pressures
compute_modify  thermo_temp dynamic yes
compute_modify  thermo_press dynamic yes
compute         MyTemp all temp
compute         MyPress all pressure MyTemp
compute_modify  MyTemp dynamic yes
compute_modify  MyPress dynamic yes

# Determine Time and temperature based on heating rate
variable        Time equal step*dt/1000 # time in picoseconds
variable        ramp_temp equal (v_Time*v_hrate)+v_stemp

# Setup logging and restart files
thermo          10000 #every 1 picosecond
thermo_style    custom step temp c_MyTemp v_ramp_temp press c_MyPress etotal ke pe density lx ly lz vol v_mass_initial v_mass_stepped v_char_yield
restart         10000 rst1.a.${myid} rst2.a.${myid} #every 1 picosecond
log             ${myid}.log.lammps


#-----------DeletingSpecies-----------  

fix             myspec all reaxff/species ${Nevery} ${Nrepeat} ${Nfreq} ${myid}.out element C H O position ${Nfreq} ${myid}.pos delete ${myid}.del masslimit ${MassMin} ${MassMax}


#-----------IncreasingTemperature-----------
# Determine total steps required for temperature ramp
if "(${stemp} < ${etemp})" then &
   "variable        steps equal 1000/dt*(${etemp}-${stemp})/${hrate}" &
   "variable        dTdS  equal (${etemp}-${stemp})/${steps}" &
else &
   "variable        steps equal 1000/dt*(${stemp}-${etemp})/${hrate}" &
   "variable        dTdS  equal (${stemp}-${etemp})/${steps}" 

# Set temperatures for each loop iteration
variable        write_steps equal round(1000/dt*(${wtemp}/${hrate})) # Total number of steps per loop iteration
variable        Niter  equal round(${steps}/${write_steps}) # Total number of loop iterations
variable        Tstart equal ${stemp}+(${dTdS}*step) # Temp at start of loop iteration
variable        Tfinal equal ${stemp}+(${dTdS}*(step+${write_steps})) # Temp at end of loop iteration

# Set ensemble
#velocity       all create ${Tstart} 4928459 dist gaussian
fix             1 all nvt temp ${Tstart} ${Tfinal} $(100*dt) 


# Run in for loop
label loop
variable i loop ${Niter}
run ${write_steps} post no # 'post no' can be commented out to get output data between write intervals in the logfile

# Write data file and reset fix
write_data      ${myid}_temp_${ramp_temp}K_time_${Time}ps.data
unfix           1
fix             1 all nvt temp ${Tstart} ${Tfinal} $(100*dt) 

next i
jump SELF loop

# Write final data file and restart file
write_restart   ${myid}_temp_${ramp_temp}K_time_${Time}ps_end_of_loop.restart
write_data      ${myid}_temp_${ramp_temp}K_time_${Time}ps_end_of_loop.data